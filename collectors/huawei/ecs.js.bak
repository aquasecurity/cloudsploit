'use strict';

const { EcsClient, ListServersDetailsRequest } = require('@huaweicloud/huaweicloud-sdk-ecs');
const { BasicCredentials } = require('@huaweicloud/huaweicloud-sdk-core');

module.exports = async function(cloudConfig, callback) {
    console.log('DEBUG: Starting ECS collection with config:', JSON.stringify(cloudConfig, null, 2));

    // Validate required config fields
    if (!cloudConfig.accessKeyId || !cloudConfig.secretAccessKey) {
        const err = new Error('Missing accessKeyId or secretAccessKey in cloudConfig');
        console.error('ERROR: ECS collector validation failed:', err.message);
        return callback(err);
    }

    try {
        // Initialize credentials
        const credentials = new BasicCredentials()
            .withAk(cloudConfig.accessKeyId)
            .withSk(cloudConfig.secretAccessKey)
            .withProjectId(cloudConfig.projectId || '');

        // Create the ECS client
        const endpoint = `https://ecs.${cloudConfig.region}.myhuaweicloud.com`;
        console.log('DEBUG: Using ECS endpoint:', endpoint);
        const client = EcsClient.newBuilder()
            .withCredential(credentials)
            .withEndpoint(endpoint)
            .build();

        // Create the request for ListServersDetails
        console.log('DEBUG: Calling ListServersDetails API...');
        const request = new ListServersDetailsRequest();
        const listServersResult = await client.listServersDetails(request);
        console.log('DEBUG: Raw listServersDetails response:', JSON.stringify(listServersResult, null, 2));

        const servers = listServersResult.servers || [];
        console.log('DEBUG: Found', servers.length, 'ECS instances');

        const serverDetails = servers.map(server => {
            const volumes = server['os-extended-volumes:volumes_attached'] || [];
            console.log(`DEBUG: Volumes for server ${server.id}:`, JSON.stringify(volumes, null, 2));
            const diskDetails = volumes.map(volume => {
                return {
                    volumeId: volume.id,
                    encrypted: false // Temporarily set to false; we'll add EVS later
                };
            });

            return {
                id: server.id,
                name: server.name,
                disks: diskDetails
            };
        });

        console.log('DEBUG: ECS instances collected:', serverDetails.length);
        const collection = { servers: serverDetails };
        callback(null, collection);
    } catch (err) {
        console.error('ERROR: Failed to collect ECS instances:', err.message);
        console.error('ERROR: Full error details:', JSON.stringify(err, null, 2));
        callback(err);
    }
};
