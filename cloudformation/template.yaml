AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploy a lambda version of CloudSploit Scanning Engine, triggered by SNS Message


Parameters:
  DefaultRoleName:
    Description: The default role name to assume when one is not provided
    Type: String

  SecretsManagerPrefix:
    Description: Prefix of secrets manager secrets for access to provider credentials
    Type: String
    Default: ''

  BucketName:
    Description: Name of the bucket to hold scan reports
    Type: String
  BucketPrefix:
    Description: The prefix to upload the scan reports under
    Type: String
    Default: ''
  CreateBucket:
    Description: Create the bucket or use an existing bucket
    Type: String
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'

  SNSTopic:
    Description: ARN from the inventory stack that triggers parallel actions across all accounts
    Type: String
    Default: ''

  Schedule:
    Description: A schedule to be applied to the lambda
    Type: String
    Default: ''
  ScheduledAccountId:
    Description: Only used if schedule is specified, scan this account ID when invoked
    Type: String
    Default: ''
  ScheduledRoleName:
    Description: Only used if schedule is specified, assume this role name to scan
    Type: String
    Default: ''
  ScheduledExternalId:
    Description: Only used if schedule is specified, use this external id to assume the role
    Type: String
    NoEcho: True
    Default: ''


Conditions:
  SubscribeLambda: !Not [ !Equals [ !Ref SNSTopic, '' ] ]
  CreateSchedule: !Not [ !Equals [ !Ref Schedule, ''] ]
  ShouldCreateBucket: !Equals [ !Ref CreateBucket, 'yes' ]


Resources:
  CloudsploitScanner:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-scanner
      Description: Execute a CloudSploit Scan on the specific AWS account
      Timeout: 900
      MemorySize: 3008
      Handler: lambda_index.handler
      Runtime: nodejs10.x
      CodeUri: ..
      Environment:
        Variables:
          DEFAULT_ROLE_NAME: !Ref DefaultRoleName
          RESULT_BUCKET: !Ref BucketName
          RESULT_PREFIX: !Ref BucketPrefix
          SECRET_PREFIX: !Ref SecretsManagerPrefix
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Action: s3:PutObject
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${BucketName}/*
                - !Sub arn:aws:s3:::${BucketName}
            - Effect: Allow
              Action: sts:AssumeRole
              Resource: '*'
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerPrefix}/*

  CloudsploitScannerSchedule:
    Condition: CreateSchedule
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt CloudsploitScanner.Arn
          Id: CloudsploitScannerScheduleLambdaTarget
          Input: !Sub |
            {
              "aws": {
                "accountID": "${ScheduledAccountId}",
                "roleArn": "${ScheduledRoleName}",
                "externalId": "${ScheduledExternalId}"
              }
            }

  CloudsploitScannerSNSPermission:
    Condition: SubscribeLambda
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CloudsploitScanner.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
      Action: lambda:invokeFunction

  CloudsploitScannerSubscription:
    Condition: SubscribeLambda
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CloudsploitScanner.Arn
      Protocol: lambda
      TopicArn: !Ref SNSTopic

  CloudsploitResultsBucket:
    Condition: ShouldCreateBucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName


Outputs:
  CloudsploutLambdaArn:
    Value: !GetAtt CloudsploitScanner.Arn

  CloudsploutLambdaName:
    Value: !Ref CloudsploitScanner
